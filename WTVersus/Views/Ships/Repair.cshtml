@model IEnumerable<WTVersus.Models.Ship>;
@{
    ViewData["Title"] = "Heatmap of ships repair";
    double[] numbers = new double[] { 1.0, 1.3, 1.7, 2.0, 2.3, 2.7, 3.0, 3.3, 3.7, 4.0, 4.3, 4.7, 5.0, 5.3, 5.7, 6.0, 6.3, 6.7, 7.0 };
    string[] nations = new string[] { "USA", "Germany", "USSR", "Britain", "Japan", "China", "Italy", "France", "Sweden" };

    double LeftTableHandler(double BR, string Nation)
    {
        var filteredIEnum = Model.Where(p => p.BR == BR & p.Nation == Nation).Select(p => p.RepairCost.Value);
        double result;
        if (filteredIEnum.Count() != 0)
        {
            result = (filteredIEnum.Max());
        }
        else result = 0;

        return result;
    }

    double RightTableHandler(double BR, string Nation)
    {
        var filteredIEnum = Model.Where(p => p.BR == BR & p.Nation == Nation).Select(p => p.RepairCost.Value);
        double result;
        if (filteredIEnum.Count() != 0)
        {
            result = Math.Truncate((filteredIEnum.Average()));
        }
        else result = 0;

        return result;
    }
}


    <div class="container-fluid">
        <h1>
            Heatmap of ships*
        </h1>
        <a asp-controller="Ships" asp-action="Count" class="btn btn-outline-danger">Counts</a>
        <a asp-controller="Ships" asp-action="Repair" class="btn btn-outline-danger active">Repair cost</a>

        <hr class="my-2">
        <div class="row">
            <div class="col-sm-6">
                <h1>Max repair cost</h1>
                <table class="table table-borderless table-sm heatmap-ships">
                    @await Html.PartialAsync("_FlagsRow")
                    <tbody>
                        @{
                            foreach (double number in numbers)
                            {
                                <tr>
                                    <th class="font-weight-bolder text-center">@number.ToString("0.0#")</th>
                                    @{
                                        foreach (string nation in nations)
                                        {
                                            <td class="font-weight-normal text-center" onmouseover="this.style.color='black'">@LeftTableHandler(number, nation)</td>
                                        }
                                    }
                                </tr>
                            } }
                    </tbody>
                </table>
            </div>
            <div class="col-sm-6">
                <h1>Average repair cost</h1>
                <table class="table table-borderless table-sm heatmap-ships">
                    @await Html.PartialAsync("_FlagsRow")
                    <tbody>
                        @{
                            foreach (double number in numbers)
                            {
                                <tr>
                                    <th class="font-weight-bolder text-center">@number.ToString("0.0#")</th>
                                    @{
                                        foreach (string nation in nations)
                                        {
                                            <td class="font-weight-normal text-center" onmouseover="this.style.color='black'">@RightTableHandler(number, nation)</td>
                                        }
                                    }
                                </tr>
                            } }
                    </tbody>
                </table>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col"></div>
            <div class="col">
                <table class="table table-borderless table-sm text-center">
                    <tr>
                        <td style="background-color:#ffffff">&#160;</td>
                        <td style="background-color:#5fbf78">&#160;</td>
                        <td style="background-color:#8cca7d">&#160;</td>
                        <td style="background-color:#b6d683">&#160;</td>
                        <td style="background-color:#e1e181">&#160;</td>
                        <td style="background-color:#f4e882">&#160;</td>
                        <td style="background-color:#ffd281">&#160;</td>
                        <td style="background-color:#fcaf77">&#160;</td>
                        <td style="background-color:#fb8b73">&#160;</td>
                        <td style="background-color:#f96969">&#160;</td>
                        <td style="background-color:#e35756">&#160;</td>
                    </tr>
                    <tr>
                        <td>0</td>
                        <td>2k</td>
                        <td>4k</td>
                        <td>6k</td>
                        <td>8k</td>
                        <td>10k</td>
                        <td>12k</td>
                        <td>14k</td>
                        <td>16k</td>
                        <td>20k</td>
                        <td>20k+</td>
                    </tr>
                </table>
            </div>
            <div class="col"></div>
        </div>
        <p>* Ships I-II tiers will be added later</p>
    </div>


<script>
    var tables = document.querySelectorAll('.heatmap-ships');
    tables.forEach(table => {
        var tbody = table.getElementsByTagName('tbody')[0];
        var cells = tbody.getElementsByTagName('td');

        for (var i = 0, len = cells.length; i < len; i++) {

            if (parseInt(cells[i].innerHTML, 10) == 0) {
                cells[i].style.backgroundColor = '#ffffff';
                cells[i].style.color = '#ffffff';
            }

            if (parseInt(cells[i].innerHTML, 10) > 0) {
                cells[i].style.backgroundColor = '#5fbf78';
                cells[i].style.color = '#5fbf78';
            }

            if (parseInt(cells[i].innerHTML, 10) > 2000) {
                cells[i].style.backgroundColor = '#8cca7d';
                cells[i].style.color = '#8cca7d';
            }

            if (parseInt(cells[i].innerHTML, 10) > 4000) {
                cells[i].style.backgroundColor = '#b6d683';
                cells[i].style.color = '#b6d683';
            }

            if (parseInt(cells[i].innerHTML, 10) > 6000) {
                cells[i].style.backgroundColor = '#e1e181';
                cells[i].style.color = '#e1e181';
            }

            if (parseInt(cells[i].innerHTML, 10) > 8000) {
                cells[i].style.backgroundColor = '#f4e882';
                cells[i].style.color = '#f4e882';
            }

            if (parseInt(cells[i].innerHTML, 10) > 10000) {
                cells[i].style.backgroundColor = '#ffd281';
                cells[i].style.color = '#ffd281';
            }

            if (parseInt(cells[i].innerHTML, 10) > 12000) {
                cells[i].style.backgroundColor = '#fcaf77';
                cells[i].style.color = '#fcaf77';
            }

            if (parseInt(cells[i].innerHTML, 10) > 14000) {
                cells[i].style.backgroundColor = '#fb8b73';
                cells[i].style.color = '#fb8b73';
            }

            if (parseInt(cells[i].innerHTML, 10) > 16000) {
                cells[i].style.backgroundColor = '#f96969';
                cells[i].style.color = '#f96969';
            }

            if (parseInt(cells[i].innerHTML, 10) > 20000) {
                cells[i].style.backgroundColor = '#e35756';
                cells[i].style.color = '#e35756';
            }
        }
    });
</script>